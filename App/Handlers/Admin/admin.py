from os import getenv

from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, ContentType

from App.Handlers import keyboards as kb
from App.Database import requests as rq


admin_router = Router()


# -------------------------------------------------------------------------------------–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞--------------------------------------------------------------------------------------
@admin_router.message(F.text == getenv('ADMIN_SECRET_CODE'))
async def add_admin(message: Message, bot: Bot):
    await message.answer(
        "Siz adminlikka ariza qoldirdingiz. Arizangiz tasdiqlanish jarayonida ‚è≥",
        reply_markup=kb.uz_to_main_menu_kb
    )
    await bot.send_message(
        chat_id=int(getenv('ADMIN_ID')),
        text=f"<b>–ó–∞—è–≤–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞</b>\n\n"
             f"<b>–ò–º—è:</b> {message.from_user.full_name}\n"
             f"<b>ID:</b> {message.from_user.id}\n"
             f"<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{message.from_user.username}",
        reply_markup=kb.confirm_admin_kb(message.from_user.id)
    )
    await rq.handle_admin(telegram_id=message.from_user.id, full_name=message.from_user.full_name, username=message.from_user.username)


@admin_router.callback_query(F.data.startswith("admin_confirm"))
async def admin_confirm(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    user_id = int(callback.data.split(":")[1])
    admin = await rq.handle_admin(telegram_id=user_id, for_confirm=True)
    await callback.message.answer(
        f"<b>{admin.full_name}</b> —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ–∂–¥–µ–Ω –∞–¥–º–∏–Ω–æ–º ‚úÖ",
        reply_markup=kb.admin_menu_kb
    )
    await bot.send_message(
        chat_id=user_id,
        text=f"Sizning adminlikka arizangiz muvaqqiyatli tasdiqlandi ‚úÖ",
        reply_markup=kb.admin_menu_kb
    )


@admin_router.callback_query(F.data.startswith("admin_cancel"))
async def admin_cancel(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    user_id = int(callback.data.split(":")[1])
    for_admin_name = await rq.handle_admin(telegram_id=user_id)
    admin_name = for_admin_name.full_name
    await callback.message.answer(
        f"<b>{admin_name}</b> —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω –æ—Ç –∞–¥–º–∏–Ω—Å—Ç–≤–∞ ‚úÖ",
        reply_markup=kb.admin_menu_kb
    )
    await bot.send_message(
        chat_id=user_id,
        text=f"Afsuski, sizning adminlikka arizangiz bekor qilindi ‚ùå",
        reply_markup=kb.uz_to_main_menu_kb
    )
    await rq.handle_admin(telegram_id=user_id, for_cancel=True)


# ----------------------------------------------------------------------------------------–ê–Ω–∞–ª–∏—Ç–∏–∫–∞-------------------------------------------------------------------------------------
@admin_router.message(F.text == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
async def enter_ticket(message: Message):
    overall_users = await rq.get_all_users()
    weekly_users = await rq.get_users_last_week()

    await message.answer(
        f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ:</b> {len(overall_users)}\n"
        f"üìà <b>–ù–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–∏—Ç–æ–∫:</b> +{weekly_users}",
        reply_markup=kb.admin_analytics_kb
    )


@admin_router.message(F.text == "–†–µ–∫–ª–∞–º–Ω—ã–π –æ—Ç—á–µ—Ç")
async def show_analytics(message: Message):
    data = await rq.get_referral_stats()
    numerate = 0
    if not data:
        await message.answer("–¢—É—Ç –ø–æ–∫–∞ –ø—É—Å—Ç–æ(")
        return

    text = "üìä <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b>\n\n"
    for code, count in data:
        percent = await rq.get_referral_percentage(code)
        text += f"{numerate + 1}. <b>{code}:</b> {count} ({percent}%)\n"
        numerate += 1

    await message.answer(text, reply_markup=kb.admin_to_menu_kb)


# ----------------------------------------------------------------------------------------–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ-------------------------------------------------------------------------------------
@admin_router.message(F.text == "üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
async def enter_ticket(message: Message):
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ, –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.admin_manage_kb
    )


# ------------------------------------------------------------------------------------–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤-------------------------------------------------------------------------------------
class AddQuestion(StatesGroup):
    enter_ticket_number = State()
    enter_question_text = State()
    enter_first_option = State()
    enter_second_option = State()
    enter_other_options_or_no = State()
    enter_other_options = State()
    choose_correct_option = State()
    send_photo = State()
    confirm_data = State()


class AddTicket(StatesGroup):
    enter_ticket = State()
    confirm_or_reject_ticket = State()


@admin_router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –±–∏–ª–µ—Ç ‚ûï")
async def enter_ticket(message: Message, state: FSMContext):
    await state.clear()
    last_ticket = await rq.get_all_ticket_nums()
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–≥–æ –±–∏–ª–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>{last_ticket[-1] + 1}</code>)",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AddTicket.enter_ticket)


@admin_router.message(AddTicket.enter_ticket)
async def check_ticket(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! [check_ticket()]")
        return
    
    tickets = await rq.get_ticket_by_number(int(message.text))
    if tickets:
        await message.answer("–¢–∞–∫–æ–π –±–∏–ª–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=kb.ticket_not_found_kb)
        return
    await state.update_data(ticket_number=int(message.text))
    data = await state.get_data()
    await message.answer(
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–∏–ª–µ—Ç —Å –Ω–æ–º–µ—Ä–æ–º <b>{data['ticket_number']}</b>, –≤–µ—Ä–Ω–æ?",
        reply_markup=kb.confirm_kb
    )
    await state.set_state(AddTicket.confirm_or_reject_ticket)


@admin_router.message(AddTicket.confirm_or_reject_ticket)
async def confirm_or_reject_ticket(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.text.strip() == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await rq.add_ticket(ticket_num=data['ticket_number'])
        await message.answer(f"<b>{data.get('ticket_number')}</b>-—ã–π –±–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É ‚úÖ",
                             reply_markup=kb.admin_menu_kb
        )
        await state.clear()
    elif message.text.strip() == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer(f"<b>{data.get('ticket_number')}</b>-—ã–π –±–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω ‚ùå",
                             reply_markup=kb.admin_to_menu_kb
        )
        await state.clear()
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É ‚ùå",
                             reply_markup=kb.confirm_kb
        )
        return


@admin_router.message(F.text.in_(["–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å ‚ûï"]))
async def start_add_question(message: Message, state: FSMContext):
    await message.answer("–î–ª—è –∫–∞–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å? –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AddQuestion.enter_ticket_number)


@admin_router.message(AddQuestion.enter_ticket_number)
async def ticket_input(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! [ticket_input()]")
        return

    number = int(message.text)
    ticket = await rq.get_ticket_by_number(number)
    if not ticket:
        await state.clear()
        await message.answer(f"{number}-—ã–π –±–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=kb.ticket_not_found_kb)
        return

    count = await rq.count_questions_in_ticket(ticket.id)
    if count >= 10:
        await message.answer("–í —ç—Ç–æ–º –±–∏–ª–µ—Ç–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç 10 –±–∏–ª–µ—Ç–æ–≤!", reply_markup=kb.ticket_not_found_kb)
        return

    await state.update_data(ticket_id=ticket.id, ticket_number=number)
    await message.answer("–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:")
    await state.set_state(AddQuestion.enter_question_text)


@admin_router.message(AddQuestion.enter_question_text)
async def question_text_input(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º!")
        return
    
    q_number = await rq.get_next_question_number()
    await state.update_data(text=message.text, q_number=q_number, msg_options=[], kb_options=[])
    await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:")
    await state.set_state(AddQuestion.enter_first_option)


@admin_router.message(AddQuestion.enter_first_option)
async def add_first_option(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–í–∞—Ä–∏–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º!")
        return

    data = await state.get_data()
    msg_options = data.get("msg_options", [])
    msg_options.append(message.text)
    await state.update_data(msg_options=msg_options)
    kb_options = data.get("kb_options", [])
    kb_options.append('F1')
    await state.update_data(kb_options=kb_options)

    q_number = data.get("q_number")
    q_text = data.get("text")
    await message.answer(f"<b>{q_number}-savol</b>\n\n"
                         f"{q_text}\n\n\n"
                         f"F1. {msg_options[-1]}\n\n\n"
                         f"@yhq_imtihon_bot",
                         reply_markup=kb.add_first_option_kb())
    await message.answer(f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤—Ç–æ—Ä–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:")
    await state.set_state(AddQuestion.enter_second_option)


@admin_router.message(AddQuestion.enter_second_option)
async def add_second_option(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–í–∞—Ä–∏–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º!")
        return

    data = await state.get_data()
    msg_options = data.get("msg_options", [])
    msg_options.append(message.text)
    await state.update_data(msg_options=msg_options)
    kb_options = data.get("kb_options", [])
    kb_options.append('F2')
    await state.update_data(kb_options=kb_options)

    q_number = data.get("q_number")
    q_text = data.get("text")
    await message.answer(f"<b>{q_number}-savol</b>\n\n"
                         f"{q_text}\n\n\n"
                         f"F1. {msg_options[0]}\n"
                         f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
                         f"F2. {msg_options[1]}\n\n\n"
                         f"@yhq_imtihon_bot",
                         reply_markup=kb.add_second_option_kb(kb_options))
    await message.answer("–û—Ç–ª–∏—á–Ω–æ, –µ—â–µ –¥–æ–±–∞–≤–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤?",
                             reply_markup=kb.ask_for_other_option_kb)
    await state.set_state(AddQuestion.enter_other_options_or_no)


@admin_router.message(AddQuestion.enter_other_options_or_no)
async def enter_other_options_or_no(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_options = data.get("msg_options", [])
    if message.text == "–î–∞, –¥–æ–±–∞–≤–∏–º":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(AddQuestion.enter_other_options)
    elif message.text == "–ù–µ—Ç, –ø–µ—Ä–µ–π–¥–µ–º –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞":
        lines = [f"–ü–æ–Ω—è—Ç–Ω–æ, —Ç–æ–≥–¥–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ <b>{data.get('text')}</b>:\n\n"]
        for i, opt in enumerate(msg_options, start=1):
            lines.append(f"F{i}. {opt}")
            if i < len(msg_options):
                lines.append("‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî")
        lines.append("\n\n@yhq_imtihon_bot")
        text_msg = "\n".join(lines)
        await message.answer(
            text_msg,
            reply_markup=kb.answer_variants_kb(msg_options)
        )
        await state.set_state(AddQuestion.choose_correct_option)
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ ‚ùå")
        return


@admin_router.message(AddQuestion.enter_other_options)
async def add_other_option(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–í–∞—Ä–∏–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º!")
        return

    data = await state.get_data()
    msg_options = data.get("msg_options", [])
    msg_options.append(message.text)
    await state.update_data(msg_options=msg_options)
    kb_options = data.get("kb_options", [])
    kb_options.append(f'F{int(kb_options[-1][1]) + 1}')
    await state.update_data(kb_options=kb_options)
    if len(msg_options) >= 5:
        lines = [f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ <b>{data.get('text')}</b>:\n\n"]
        for i, opt in enumerate(msg_options, start=1):
            lines.append(f"F{i}. {opt}")
            if i < len(msg_options):
                lines.append("‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî")
        text_msg = "\n".join(lines)
        await message.answer(
            text_msg,
            reply_markup=kb.answer_variants_kb(msg_options)
        )
        await state.set_state(AddQuestion.choose_correct_option)
    elif len(msg_options) < 5:
        q_number = data.get("q_number")
        lines = [f"<b>{q_number}-savol</b>\n\n{data.get("text")}\n\n"]
        for i, opt in enumerate(msg_options, start=1):
            lines.append(f"F{i}. {opt}")
            if i < len(msg_options):
                lines.append("‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî")
        lines.append("\n\n@yhq_imtihon_bot")
        text_msg = "\n".join(lines)
        await message.answer(
            text_msg,
            reply_markup=kb.add_other_option_kb(msg_options)
        )
        await message.answer("–û—Ç–ª–∏—á–Ω–æ, –µ—â–µ –¥–æ–±–∞–≤–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤?",
                                 reply_markup=kb.ask_for_other_option_kb)
        await state.set_state(AddQuestion.enter_other_options_or_no)


@admin_router.message(AddQuestion.choose_correct_option)
async def select_correct_option(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_options = data.get("msg_options", [])
    kb_options = data.get("kb_options", [])
    text = message.text.strip()
    await state.update_data(correct_answer_kb=text)

    if text not in kb_options:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞–∂–∏–º–∞—è –Ω–∏–∂–µ –∫–Ω–æ–ø–∫–∏!")
        return

    answer_index = kb_options.index(text)
    correct_answer = msg_options[answer_index]
    await state.update_data(correct_answer=correct_answer)

    q_text = data.get("text", "")
    q_number = data.get("q_number")
    lines = [f"<b>{q_number}-savol</b>\n\n{q_text}\n\n"]
    for i, opt in enumerate(msg_options, start=1):
        lines.append(f"F{i}. {opt}")
        if i < len(msg_options):
            lines.append("‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî")
    lines.append("\n\n@yhq_imtihon_bot")
    text_msg = "\n".join(lines)
    await message.answer(
        text_msg,
        reply_markup=kb.identify_correct_option_kb(kb_options, correct_answer=text)
    )
    await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
        reply_markup=kb.skip_kb
    )

    await state.set_state(AddQuestion.send_photo)


@admin_router.message(AddQuestion.send_photo, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©")
async def skip_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(photo_id='-')
    
    msg_options = data.get("msg_options", [])
    kb_options = data.get("kb_options", [])
    correct_answer_kb = data.get('correct_answer_kb')
    q_text = data.get('text')
    q_number = data.get("q_number")

    lines = [f"–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n<b>{q_number}-savol</b>\n\n{q_text}\n\n"]
    for i, opt in enumerate(msg_options, start=1):
        lines.append(f"F{i}. {opt}")
        if i < len(msg_options):
            lines.append("‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî")
    lines.append("\n\n@yhq_imtihon_bot")
    text_msg = "\n".join(lines)
    
    await message.answer('‚è≥', reply_markup=ReplyKeyboardRemove())
    await message.answer(
        text_msg,
        reply_markup=kb.confirm_question_kb(kb_options, correct_answer_kb)
    )
    await state.set_state(AddQuestion.confirm_data)


@admin_router.message(AddQuestion.send_photo, F.photo)
async def handle_photo(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    data = await state.get_data()
    await state.update_data(photo_id=file_id)

    msg_options = data.get("msg_options", [])
    kb_options = data.get("kb_options", [])
    correct_answer_kb = data.get('correct_answer_kb')
    q_text = data.get('text')
    q_number = data.get("q_number")

    lines = [f"–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n<b>{q_number}-savol</b>\n\n{q_text}\n\n"]
    for i, opt in enumerate(msg_options, start=1):
        lines.append(f"F{i}. {opt}")
        if i < len(msg_options):
            lines.append("‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî")
    lines.append("\n\n@yhq_imtihon_bot")
    text_msg = "\n".join(lines)
    
    await message.answer('‚è≥', reply_markup=ReplyKeyboardRemove())
    await message.answer_photo(
        photo=file_id,
        caption=text_msg,
        reply_markup=kb.confirm_question_kb(kb_options, correct_answer_kb)
    )
    await state.set_state(AddQuestion.confirm_data)


@admin_router.callback_query(F.data.in_(["confirm_question", "cancel_question"]))
async def finalize_question(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    photo_id = data.get("photo_id")
    if callback.data == "cancel_question":
        await callback.message.delete()
        await callback.message.answer("–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω ‚ùå", reply_markup=kb.after_add_question_kb)
        await state.clear()
        return

    
    await rq.add_question(
        ticket_id=data["ticket_id"],
        text=data["text"],
        options=data["msg_options"],
        correct_answer=data["correct_answer"],
        photo_id=photo_id
    )
    await callback.answer()
    if photo_id == '-':
        await callback.message.delete()
        await callback.message.answer('üéâ', reply_markup=kb.after_add_question_kb)
        await callback.message.answer(f"<b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª—Å—è ‚úÖ</b>\n\n<b>–ë–∏–ª–µ—Ç:</b> {data['ticket_number']}\n<b>–ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞:</b> {data['q_number']}\n<b>–í–æ–ø—Ä–æ—Å:</b> {data['text']}",
                                    reply_markup=kb.after_add_question_ikb(data['kb_options'], data['correct_answer_kb']))
        await state.clear()
    elif photo_id != '-':
        await callback.message.delete()
        await callback.message.answer('üéâ', reply_markup=kb.after_add_question_kb)
        await callback.message.answer_photo(
            photo=photo_id,
            caption=f"<b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª—Å—è ‚úÖ</b>\n\n<b>–ë–∏–ª–µ—Ç:</b> {data['ticket_number']}\n<b>–ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞:</b> {data['q_number']}\n<b>–í–æ–ø—Ä–æ—Å:</b> {data['text']}",
            reply_markup=kb.after_add_question_ikb(data['kb_options'], data['correct_answer_kb'])
        )
        await state.clear()


# ---------------------------------------------------------------------------------–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ä–æ–∂–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤----------------------------------------------------------------------------------
class AddRoadSignState(StatesGroup):
    select_type = State()
    enter_sign_name = State()
    enter_sign_description = State()
    send_sign_photo = State()
    check_sign_data = State()


@admin_router.message(F.text.in_({"–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ä–æ–∂–Ω—ã–π –∑–Ω–∞–∫", "–î–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞–∫ ‚ûï"}))
async def add_road_sign(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∑–Ω–∞–∫–∞:",
        reply_markup=kb.admin_road_signs_kb
    )
    await state.set_state(AddRoadSignState.select_type)


@admin_router.message(AddRoadSignState.select_type)
async def select_type(message: Message, state: FSMContext):
    if message.content_type != ContentType.TEXT:
        await message.answer(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–Ω–∞–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º!"
        )
        return


    if message.text.strip() == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer(
                "–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω ‚ùå",
                reply_markup=kb.admin_to_menu_kb
            )
        await state.clear()
    else:

        match message.text.strip():
            case "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–µ –∑–Ω–∞–∫–∏":
                await state.update_data(sign_type='warning_signs')
            case "üî∂ –ó–Ω–∞–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞":
                await state.update_data(sign_type='privilege_signs')
            case "‚õî –ó–∞–ø—Ä–µ—â–∞—é—â–∏–µ –∑–Ω–∞–∫–∏":
                await state.update_data(sign_type='prohibition_signs')
            case "‚¨Ü –ü—Ä–µ–¥–ø–∏—Å—ã–≤–∞—é—â–∏–µ –∑–Ω–∞–∫–∏":
                await state.update_data(sign_type='guide_signs')
            case "üõ£ –ó–Ω–∞–∫–∏ –æ—Å–æ–±—ã—Ö –ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–π":
                await state.update_data(sign_type='information_signs')
            case "üõÉ –ó–Ω–∞–∫–∏ —Å–µ—Ä–≤–∏—Å–∞":
                await state.update_data(sign_type='service_signs')
            case "üîô –ó–Ω–∞–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
                await state.update_data(sign_type='additional_information_signs')
            case "üü† –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞–∫–∏":
                await state.update_data(sign_type='temporary_signs')
            case "üö¶ –°–≤–µ—Ç–æ—Ñ–æ—Ä—ã –∏ —Å–∏–≥–Ω–∞–ª—ã —Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫–∞":
                await state.update_data(sign_type='traffic_lights_signs')
            case "üö∏ –û–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏":
                await state.update_data(sign_type='identification_signs')
            case "‚ò¢Ô∏è –ó–Ω–∞–∫–∏ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏":
                await state.update_data(sign_type='danger_signs')
                
        await message.answer(
                "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–Ω–∞–∫–∞: <i>(masalan: 2.1. Asosiy yo'l)</i>",
                reply_markup=ReplyKeyboardRemove()
            )
        await state.set_state(AddRoadSignState.enter_sign_name)


@admin_router.message(AddRoadSignState.enter_sign_name)
async def enter_sign_name(message: Message, state: FSMContext):
    if message.content_type != ContentType.TEXT:
        await message.answer(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–Ω–∞–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º!"
        )
        return


    await state.update_data(sign_name=message.text)
    await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–µ–º–Ω–æ–∂–∫–æ –æ–ø–∏—à–∏—Ç–µ —ç—Ç–æ—Ç –∑–Ω–∞–∫ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
            reply_markup=kb.skip_kb
        )
    await state.set_state(AddRoadSignState.enter_sign_description)


@admin_router.message(AddRoadSignState.enter_sign_description)
async def enter_sign_description(message: Message, state: FSMContext):
    if message.content_type != ContentType.TEXT:
        await message.answer(
            "–û–ø–∏—Å–∞–Ω–∏–µ –∑–Ω–∞–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º!"
        )
        return


    if message.text.strip() == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©":
        await state.update_data(sign_description=None)
        await message.answer(
                "–ü–æ–Ω—è—Ç–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–Ω–∞–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
                reply_markup=kb.skip_kb
            )
        await state.set_state(AddRoadSignState.send_sign_photo)
    else:
        await state.update_data(sign_description=message.text)
        await message.answer(
                "–ù–∞–ø–æ—Å–ª–µ–¥–æ–∫, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–Ω–∞–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
                reply_markup=kb.skip_kb
            )
        await state.set_state(AddRoadSignState.send_sign_photo)


@admin_router.message(AddRoadSignState.send_sign_photo, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©")
async def skip_sign_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(sign_photo=None)
    await message.answer(
        f"–ü–æ–Ω—è—Ç–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–≤–µ–¥–µ–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"<b>–§–æ—Ç–æ –∑–Ω–∞–∫–∞:</b> ‚ùå\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–Ω–∞–∫–∞:</b> {data.get('sign_type')}\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–Ω–∞–∫–∞:</b> {data.get('sign_name')}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ –∑–Ω–∞–∫–∞:</b> {data.get('sign_description') if data.get('sign_description') else '-'}",
        reply_markup=kb.confirm_kb
    )
    await state.set_state(AddRoadSignState.check_sign_data)


@admin_router.message(AddRoadSignState.send_sign_photo, F.photo)
async def handle_sign_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    file_id = message.photo[-1].file_id
    await state.update_data(sign_photo=file_id)
    await message.answer_photo(
        photo=file_id,
        caption=f"–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–≤–µ–¥–µ–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
                f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–Ω–∞–∫–∞:</b> {data.get('sign_type')}\n"
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–Ω–∞–∫–∞:</b> {data.get('sign_name')}\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ –∑–Ω–∞–∫–∞:</b> {data.get('sign_description') if data.get('sign_description') else '-'}",
        reply_markup=kb.confirm_kb
    )
    await state.set_state(AddRoadSignState.check_sign_data)


@admin_router.message(AddRoadSignState.check_sign_data)
async def check_sign_data(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.text.strip() == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await rq.add_road_sign(
            sign_type=data.get('sign_type'),
            sign_name=data.get('sign_name'),
            sign_description=data.get('sign_description'),
            sign_photo=data.get('sign_photo')
        )
        await message.answer(f"–ó–Ω–∞–∫ <b>{data.get('sign_name')}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ",
                             reply_markup=kb.after_checking_sign_kb
        )
        await state.clear()
    elif message.text.strip() == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer(f"–ó–Ω–∞–∫ <b>{data.get('sign_name')}</b> —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω ‚ùå",
                             reply_markup=kb.after_checking_sign_kb
        )
        await state.clear()
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É ‚ùå",
                             reply_markup=kb.confirm_kb
        )
        return
    

# ---------------------------------------------------------------------------------–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã info----------------------------------------------------------------------------------
class ChangeInfoCommand(StatesGroup):
    enter_info_text = State()

@admin_router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç /info")
async def change_info_command(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /info:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(ChangeInfoCommand.enter_info_text)

@admin_router.message(ChangeInfoCommand.enter_info_text)
async def enter_info_text(message: Message, state: FSMContext):
    if message.content_type != ContentType.TEXT:
        await message.answer("–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç!")
        return

    text_to_save = message.html_text if message.entities else message.text

    await rq.change_info_cmd_text(text_to_save)

    await state.clear()
    await message.answer(
        "‚úÖ –¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã /info —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª—Å—è!",
        reply_markup=kb.admin_to_menu_kb
    )